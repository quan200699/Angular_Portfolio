{"version":3,"sources":["src/app/helper/admin-auth-guard.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,QAAa,cAAb;AAEE,8BAAoB,MAApB,EACoB,WADpB,EACsD;AAAA;;AAAA;;AADlC,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,WAAA,GAAA,WAAA;AAClB,aAAK,WAAL,CAAiB,WAAjB,CAA6B,SAA7B,CACE,UAAA,IAAI,EAAG;AACL,UAAA,KAAI,CAAC,WAAL,GAAmB,IAAnB;AACD,SAHH;AAKD;;AATH;AAAA;AAAA,oCAWc,IAXd,EAW4C,KAX5C,EAWsE;AAClE,cAAI,YAAY,GAAG,KAAnB;;AACA,cAAI,KAAK,WAAT,EAAsB;AACpB,gBAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,KAAlC;;AADoB,uDAED,QAFC;AAAA;;AAAA;AAEpB,kEAA6B;AAAA,oBAAlB,IAAkB;;AAC3B,oBAAI,IAAI,CAAC,SAAL,KAAmB,OAAvB,EAAgC;AAC9B,kBAAA,YAAY,GAAG,IAAf;AACA;AACD;AACF;AAPmB;AAAA;AAAA;AAAA;AAAA;;AAQpB,gBAAI,YAAJ,EAAkB;AAChB,qBAAO,IAAP;AACD,aAFD,MAEO;AACL,mBAAK,WAAL,CAAiB,MAAjB;AACA,mBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,GAAD,EAAM,OAAN,EAAe,WAAf,CAArB,EAAkD;AAAE,gBAAA,WAAW,EAAE;AAAC,kBAAA,KAAK,EAAE;AAAR,iBAAf;AAA8B,gBAAA,mBAAmB,EAAE;AAAnD,eAAlD;AACA,qBAAO,KAAP;AACD;AACF,WAfD,MAeO;AACL;AACA,iBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,GAAD,EAAM,OAAN,EAAe,OAAf,CAArB,EAA8C;AAAE,cAAA,WAAW,EAAE;AAAE,gBAAA,SAAS,EAAE,KAAK,CAAC;AAAnB;AAAf,aAA9C;AACA,mBAAO,KAAP;AACD;AACF;AAjCH;AAAA;AAAA,yCAkCmB,IAlCnB,EAkCiD,KAlCjD,EAkC2E;AACvE,cAAI,KAAK,WAAT,EAAsB;AACpB,gBAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,KAAlC;AACA,gBAAI,YAAY,GAAG,KAAnB;;AAFoB,wDAGD,QAHC;AAAA;;AAAA;AAGpB,qEAA6B;AAAA,oBAAlB,IAAkB;;AAC3B,oBAAI,IAAI,CAAC,SAAL,KAAmB,OAAvB,EAAgC;AAC9B,kBAAA,YAAY,GAAG,IAAf;AACA;AACD;AACF;AARmB;AAAA;AAAA;AAAA;AAAA;;AASpB,mBAAO,YAAP;AACD,WAVD,MAUO;AACL;AACA,iBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,GAAD,EAAM,OAAN,EAAe,OAAf,CAArB,EAA8C;AAAE,cAAA,WAAW,EAAE;AAAE,gBAAA,SAAS,EAAE,KAAK,CAAC;AAAnB;AAAf,aAA9C;AACA,mBAAO,KAAP;AACD;AACF;AAlDH;AAAA;AAAA,gCAmDU,KAnDV,EAmDwB,QAnDxB,EAmD8C;AAC1C,iBAAO,IAAP;AACD;AArDH;;AAAA;AAAA,OAAA;;;;cAE8B,4CAAA,CAAA,QAAA;;cACK,4DAAA,CAAA,uBAAA;;;;AAHtB,IAAA,cAAc,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAH1B,MAAA,CAAA,0CAAA,CAAA,YAAA,CAAA,CAAA,CAAW;AACV,MAAA,UAAU,EAAE;AADF,KAAX,CAG0B,CAAA,EAAd,cAAc,CAAd","sourcesContent":["import {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  CanActivateChild,\r\n  CanLoad,\r\n  Route,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlSegment\r\n} from '@angular/router';\r\nimport {Injectable} from '@angular/core';\r\nimport {UserToken} from '../model/user-token';\r\nimport {AuthenticationService} from '../service/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminAuthGuard implements CanActivate, CanActivateChild, CanLoad {\r\n  currentUser: UserToken;\r\n  constructor(private router: Router,\r\n              private authService: AuthenticationService) {\r\n    this.authService.currentUser.subscribe(\r\n      next => {\r\n        this.currentUser = next;\r\n      }\r\n    );\r\n  }\r\n\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    let hasRoleAdmin = false;\r\n    if (this.currentUser) {\r\n      const roleList = this.currentUser.roles;\r\n      for (const role of roleList) {\r\n        if (role.authority === 'ADMIN') {\r\n          hasRoleAdmin = true;\r\n          break;\r\n        }\r\n      }\r\n      if (hasRoleAdmin) {\r\n        return true;\r\n      } else {\r\n        this.authService.logout();\r\n        this.router.navigate(['/', 'admin', 'dashboard'], { queryParams: {login: true}, queryParamsHandling: 'merge' } );\r\n        return false;\r\n      }\r\n    } else {\r\n      // not logged in so redirect to login page with the return url\r\n      this.router.navigate(['/', 'admin', 'login'], { queryParams: { returnUrl: state.url } });\r\n      return false;\r\n    }\r\n  }\r\n  canActivateChild(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.currentUser) {\r\n      const roleList = this.currentUser.roles;\r\n      let hasRoleAdmin = false;\r\n      for (const role of roleList) {\r\n        if (role.authority === 'ADMIN') {\r\n          hasRoleAdmin = true;\r\n          break;\r\n        }\r\n      }\r\n      return hasRoleAdmin;\r\n    } else {\r\n      // not logged in so redirect to login page with the return url\r\n      this.router.navigate(['/', 'admin', 'login'], { queryParams: { returnUrl: state.url } });\r\n      return false;\r\n    }\r\n  }\r\n  canLoad(route: Route, segments: UrlSegment[]) {\r\n    return true;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"common-es5.js"}